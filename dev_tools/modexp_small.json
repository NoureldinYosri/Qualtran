{
  "bloq_classname": "ModExp",
  "bloq_docstring": "## `ModExp`\nPerform $b^e \\mod{m}$ for constant `base` $b$, `mod` $m$, and quantum `exponent` $e$.\n\nModular exponentiation is the main computational primitive for quantum factoring algorithms.\nWe follow [GE2019]'s \"reference implementation\" for factoring. See `ModExp.make_for_shor`\nto set the class attributes for a factoring run.\n\nThis bloq decomposes into controlled modular exponentiation for each exponent bit.\n\n#### Parameters\n - `base`: The integer base of the exponentiation\n - `mod`: The integer modulus\n - `exp_bitsize`: The size of the `exponent` thru-register\n - `x_bitsize`: The size of the `x` right-register \n\n#### Registers\n - `exponent`: The exponent\n - `x [right]`: The output register containing the result of the exponentiation \n\n#### References\n - [How to factor 2048 bit RSA integers in 8 hours using 20 million noisy qubits](https://arxiv.org/abs/1905.09749). Gidney and Eker\u00e5. 2019.\n",
  "bloq_attributes": {
    "base": 3,
    "mod": 15,
    "exp_bitsize": 3,
    "x_bitsize": 2048
  },
  "callees": [
    {
      "bloq_ref": "CtrlModMul(k=_k0, mod=15, bitsize=2048)",
      "edge_data": {
        "n": 3
      }
    },
    {
      "bloq_ref": "IntState(val=1, bitsize=2048)",
      "edge_data": {
        "n": 1
      }
    }
  ],
  "decomposition_dag": {
    "edges": [
      [
        {
          "binst": "LeftDangle",
          "reg_name": "exponent",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=Split(dtype=QUInt(bitsize=3)), i=1)",
          "reg_name": "reg",
          "reg_side": "Side.LEFT",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=Split(dtype=QUInt(bitsize=3)), i=1)",
          "reg_name": "reg",
          "reg_side": "Side.RIGHT",
          "idx": [
            2
          ]
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=3, mod=15, bitsize=2048), i=2)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=IntState(val=1, bitsize=2048), i=0)",
          "reg_name": "val",
          "reg_side": "Side.RIGHT",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=3, mod=15, bitsize=2048), i=2)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=Split(dtype=QUInt(bitsize=3)), i=1)",
          "reg_name": "reg",
          "reg_side": "Side.RIGHT",
          "idx": [
            1
          ]
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=9, mod=15, bitsize=2048), i=3)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=3, mod=15, bitsize=2048), i=2)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=9, mod=15, bitsize=2048), i=3)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=Split(dtype=QUInt(bitsize=3)), i=1)",
          "reg_name": "reg",
          "reg_side": "Side.RIGHT",
          "idx": [
            0
          ]
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=6, mod=15, bitsize=2048), i=4)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=9, mod=15, bitsize=2048), i=3)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=6, mod=15, bitsize=2048), i=4)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=6, mod=15, bitsize=2048), i=4)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=Join(dtype=QUInt(bitsize=3)), i=5)",
          "reg_name": "reg",
          "reg_side": "Side.LEFT",
          "idx": [
            0
          ]
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=9, mod=15, bitsize=2048), i=3)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=Join(dtype=QUInt(bitsize=3)), i=5)",
          "reg_name": "reg",
          "reg_side": "Side.LEFT",
          "idx": [
            1
          ]
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=3, mod=15, bitsize=2048), i=2)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=Join(dtype=QUInt(bitsize=3)), i=5)",
          "reg_name": "reg",
          "reg_side": "Side.LEFT",
          "idx": [
            2
          ]
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=Join(dtype=QUInt(bitsize=3)), i=5)",
          "reg_name": "reg",
          "reg_side": "Side.RIGHT",
          "idx": []
        },
        {
          "binst": "RightDangle",
          "reg_name": "exponent",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=6, mod=15, bitsize=2048), i=4)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "RightDangle",
          "reg_name": "x",
          "reg_side": "Side.RIGHT",
          "idx": []
        }
      ]
    ]
  },
  "decomposition_musical_score": {
    "max_x": 6,
    "max_y": 4,
    "soqs": [
      {
        "symb_cls": "Text",
        "symb_attributes": {
          "text": "exponent/QUInt(3)",
          "fontsize": 8
        },
        "y": 0,
        "seq_x": -1,
        "topo_gen": 0,
        "ident": "dang,exponent,l,()"
      },
      {
        "symb_cls": "LarrowTextBox",
        "symb_attributes": {
          "text": "1"
        },
        "y": 1,
        "seq_x": 0,
        "topo_gen": 0,
        "ident": "0,val,Side.RIGHT,()"
      },
      {
        "symb_cls": "RarrowTextBox",
        "symb_attributes": {
          "text": " "
        },
        "y": 0,
        "seq_x": 1,
        "topo_gen": 1,
        "ident": "1,reg,Side.LEFT,()"
      },
      {
        "symb_cls": "LarrowTextBox",
        "symb_attributes": {
          "text": "[2]"
        },
        "y": 4,
        "seq_x": 1,
        "topo_gen": 1,
        "ident": "1,reg,Side.RIGHT,(2,)"
      },
      {
        "symb_cls": "LarrowTextBox",
        "symb_attributes": {
          "text": "[1]"
        },
        "y": 3,
        "seq_x": 1,
        "topo_gen": 1,
        "ident": "1,reg,Side.RIGHT,(1,)"
      },
      {
        "symb_cls": "LarrowTextBox",
        "symb_attributes": {
          "text": "[0]"
        },
        "y": 2,
        "seq_x": 1,
        "topo_gen": 1,
        "ident": "1,reg,Side.RIGHT,(0,)"
      },
      {
        "symb_cls": "Circle",
        "symb_attributes": {
          "filled": true
        },
        "y": 4,
        "seq_x": 2,
        "topo_gen": 2,
        "ident": "2,ctrl,Side.THRU,()"
      },
      {
        "symb_cls": "TextBox",
        "symb_attributes": {
          "text": "*=3"
        },
        "y": 1,
        "seq_x": 2,
        "topo_gen": 2,
        "ident": "2,x,Side.THRU,()"
      },
      {
        "symb_cls": "Circle",
        "symb_attributes": {
          "filled": true
        },
        "y": 3,
        "seq_x": 3,
        "topo_gen": 3,
        "ident": "3,ctrl,Side.THRU,()"
      },
      {
        "symb_cls": "TextBox",
        "symb_attributes": {
          "text": "*=9"
        },
        "y": 1,
        "seq_x": 3,
        "topo_gen": 3,
        "ident": "3,x,Side.THRU,()"
      },
      {
        "symb_cls": "Circle",
        "symb_attributes": {
          "filled": true
        },
        "y": 2,
        "seq_x": 4,
        "topo_gen": 4,
        "ident": "4,ctrl,Side.THRU,()"
      },
      {
        "symb_cls": "TextBox",
        "symb_attributes": {
          "text": "*=6"
        },
        "y": 1,
        "seq_x": 4,
        "topo_gen": 4,
        "ident": "4,x,Side.THRU,()"
      },
      {
        "symb_cls": "RarrowTextBox",
        "symb_attributes": {
          "text": "[0]"
        },
        "y": 2,
        "seq_x": 5,
        "topo_gen": 5,
        "ident": "5,reg,Side.LEFT,(0,)"
      },
      {
        "symb_cls": "RarrowTextBox",
        "symb_attributes": {
          "text": "[1]"
        },
        "y": 3,
        "seq_x": 5,
        "topo_gen": 5,
        "ident": "5,reg,Side.LEFT,(1,)"
      },
      {
        "symb_cls": "RarrowTextBox",
        "symb_attributes": {
          "text": "[2]"
        },
        "y": 4,
        "seq_x": 5,
        "topo_gen": 5,
        "ident": "5,reg,Side.LEFT,(2,)"
      },
      {
        "symb_cls": "LarrowTextBox",
        "symb_attributes": {
          "text": " "
        },
        "y": 0,
        "seq_x": 5,
        "topo_gen": 5,
        "ident": "5,reg,Side.RIGHT,()"
      },
      {
        "symb_cls": "Text",
        "symb_attributes": {
          "text": "exponent/QUInt(3)",
          "fontsize": 8
        },
        "y": 0,
        "seq_x": 6,
        "topo_gen": 6,
        "ident": "dang,exponent,r,()"
      },
      {
        "symb_cls": "Text",
        "symb_attributes": {
          "text": "x/QUInt(2048)",
          "fontsize": 8
        },
        "y": 1,
        "seq_x": 6,
        "topo_gen": 6,
        "ident": "dang,x,r,()"
      }
    ],
    "hlines": [
      {
        "y": 0,
        "seq_x_start": -1,
        "seq_x_end": 1
      },
      {
        "y": 0,
        "seq_x_start": 5,
        "seq_x_end": 6
      },
      {
        "y": 1,
        "seq_x_start": 0,
        "seq_x_end": 6
      },
      {
        "y": 2,
        "seq_x_start": 1,
        "seq_x_end": 5
      },
      {
        "y": 3,
        "seq_x_start": 1,
        "seq_x_end": 5
      },
      {
        "y": 4,
        "seq_x_start": 1,
        "seq_x_end": 5
      }
    ],
    "vlines": [
      {
        "x": 0,
        "top_y": 1,
        "bottom_y": 1,
        "label": {
          "text": "",
          "fontsize": 10
        }
      },
      {
        "x": 1,
        "top_y": 4,
        "bottom_y": 0,
        "label": {
          "text": "",
          "fontsize": 10
        }
      },
      {
        "x": 2,
        "top_y": 4,
        "bottom_y": 1,
        "label": {
          "text": "mod 15",
          "fontsize": 10
        }
      },
      {
        "x": 3,
        "top_y": 3,
        "bottom_y": 1,
        "label": {
          "text": "mod 15",
          "fontsize": 10
        }
      },
      {
        "x": 4,
        "top_y": 2,
        "bottom_y": 1,
        "label": {
          "text": "mod 15",
          "fontsize": 10
        }
      },
      {
        "x": 5,
        "top_y": 4,
        "bottom_y": 0,
        "label": {
          "text": "",
          "fontsize": 10
        }
      }
    ]
  }
}