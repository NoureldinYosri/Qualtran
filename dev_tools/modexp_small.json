{
  "bloq_classname": "ModExp",
  "bloq_docstring": "## `ModExp`\nPerform $b^e \\mod{m}$ for constant `base` $b$, `mod` $m$, and quantum `exponent` $e$.\n\nModular exponentiation is the main computational primitive for quantum factoring algorithms.\nWe follow [GE2019]'s \"reference implementation\" for factoring. See `ModExp.make_for_shor`\nto set the class attributes for a factoring run.\n\nThis bloq decomposes into controlled modular exponentiation for each exponent bit.\n\n#### Parameters\n - `base`: The integer base of the exponentiation\n - `mod`: The integer modulus\n - `exp_bitsize`: The size of the `exponent` thru-register\n - `x_bitsize`: The size of the `x` right-register \n\n#### Registers\n - `exponent`: The exponent\n - `x [right]`: The output register containing the result of the exponentiation \n\n#### References\n - [How to factor 2048 bit RSA integers in 8 hours using 20 million noisy qubits](https://arxiv.org/abs/1905.09749). Gidney and Eker\u00e5. 2019.\n",
  "bloq_attributes": {
    "base": 3,
    "mod": 15,
    "exp_bitsize": 3,
    "x_bitsize": 2048
  },
  "callees": [
    {
      "bloq_ref": "IntState(val=1, bitsize=2048)",
      "edge_data": {
        "n": 1
      }
    },
    {
      "bloq_ref": "CtrlModMul(k=_k0, mod=15, bitsize=2048)",
      "edge_data": {
        "n": 3
      }
    }
  ],
  "decomposition_dag": {
    "edges": [
      [
        {
          "binst": "LeftDangle",
          "reg_name": "exponent",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=Split(dtype=QUInt(bitsize=3)), i=1)",
          "reg_name": "reg",
          "reg_side": "Side.LEFT",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=Split(dtype=QUInt(bitsize=3)), i=1)",
          "reg_name": "reg",
          "reg_side": "Side.RIGHT",
          "idx": [
            2
          ]
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=3, mod=15, bitsize=2048), i=2)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=IntState(val=1, bitsize=2048), i=0)",
          "reg_name": "val",
          "reg_side": "Side.RIGHT",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=3, mod=15, bitsize=2048), i=2)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=Split(dtype=QUInt(bitsize=3)), i=1)",
          "reg_name": "reg",
          "reg_side": "Side.RIGHT",
          "idx": [
            1
          ]
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=9, mod=15, bitsize=2048), i=3)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=3, mod=15, bitsize=2048), i=2)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=9, mod=15, bitsize=2048), i=3)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=Split(dtype=QUInt(bitsize=3)), i=1)",
          "reg_name": "reg",
          "reg_side": "Side.RIGHT",
          "idx": [
            0
          ]
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=6, mod=15, bitsize=2048), i=4)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=9, mod=15, bitsize=2048), i=3)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=6, mod=15, bitsize=2048), i=4)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=6, mod=15, bitsize=2048), i=4)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=Join(dtype=QUInt(bitsize=3)), i=5)",
          "reg_name": "reg",
          "reg_side": "Side.LEFT",
          "idx": [
            0
          ]
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=9, mod=15, bitsize=2048), i=3)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=Join(dtype=QUInt(bitsize=3)), i=5)",
          "reg_name": "reg",
          "reg_side": "Side.LEFT",
          "idx": [
            1
          ]
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=3, mod=15, bitsize=2048), i=2)",
          "reg_name": "ctrl",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "BloqInstance(bloq=Join(dtype=QUInt(bitsize=3)), i=5)",
          "reg_name": "reg",
          "reg_side": "Side.LEFT",
          "idx": [
            2
          ]
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=Join(dtype=QUInt(bitsize=3)), i=5)",
          "reg_name": "reg",
          "reg_side": "Side.RIGHT",
          "idx": []
        },
        {
          "binst": "RightDangle",
          "reg_name": "exponent",
          "reg_side": "Side.THRU",
          "idx": []
        }
      ],
      [
        {
          "binst": "BloqInstance(bloq=CtrlModMul(k=6, mod=15, bitsize=2048), i=4)",
          "reg_name": "x",
          "reg_side": "Side.THRU",
          "idx": []
        },
        {
          "binst": "RightDangle",
          "reg_name": "x",
          "reg_side": "Side.RIGHT",
          "idx": []
        }
      ]
    ]
  }
}