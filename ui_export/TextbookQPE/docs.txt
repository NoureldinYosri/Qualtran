Phase Estimation algorithm as presented in Chapter 5.2 of Neilson & Chuang

The bloq implements the following phase estimation circuit, where `ctrl_state_prep` and
`qft_inv` are configurable parameters.

```
       ┌─────────┐                              ┌─────────┐
  |0> -│         │-----------------------@------│         │---M--- [m1]:highest bit
       │         │                       |      │         │
  |0> -│         │-----------------@-----+------│         │---M--- [m2]
       │CtrlState│                 |     |      │ QFT_inv │
  |0> -│  Prep   │-----------@-----+-----+------│         │---M--- [m3]
       │         │           |     |     |      │         │
  |0> -│         │-----@-----+-----+-----+------│         │---M--- [m4]:lowest bit
       └─────────┘     |     |     |     |      └─────────┘
|Psi> -----------------U-----U^2---U^4---U^8---------------------- |Psi>
```

Note that the circuit measures $\varphi$ (in fixed point representation,
so $0 \leq \varphi \leq 1$) s.t. $e^{i\phi}$ is an eigenvalue of $U$ where $\phi = 2\pi\varphi$
is the estimated phase.

The standard textbook version, as described in Ref[1], uses

1. A uniform state preparation via hadamard on all control qubits for `CtrlStatePrep`
2. A textbook QFT inverse algorithm, implemented in `QFTTextBook`, for `QFT_inv`

Some useful properties of the phase estimation algorithm are given as follows -

## Cost of TextbookQPE
The cost of textbook QPE on `m` control qubits is a sum of costs of

1. **CtrlStatePrep** - This typically scales as $\mathcal{O}(m)$. For uniform state preparation,
        the cost is simply $m$ clifford gates.
2. **Controlled-Us** - There are two cases:
    1. If the unitary is fast forwardable; i.e. cost of $U^n$ is independent of $n$, the cost
        of this step is simply $\mathcal{O}(m \text{ cost(C-U)})$
    2. If the unitary is not fast forwardable; the cost of this step is
        $\mathcal{O}((2 ^ {m} - 1) \text{cost(C-U)})$.
4. **QFT_inv** - The textbook version of QFT uses $\mathcal{O}(m^2)$ rotations but this can be
        improved to $\mathcal{O}(m \log{m})$ using approximate QFT constructions.

As seen above, in most cases the dominant cost of phase estimation comes from step 2.B, which
depends exponentially on the number of control bits $m$.

## Choosing number of control bits - $m$.
In the analysis below, we assume the textbook version of phase estimation where `CtrlStatePrep`
is a uniform state preparation. One can obtain smaller values for $m$ when using different
initial states for the control register, like then `LPResourceState` implemented in Qualtran.

### Dependence of $m$ using precision $n$ and success probability $\delta$ as the measure of uncertainty
One way to think about the uncertainty in the obtained phase is to consider the problem where
you wish to estimate the phase $\varphi$ upto $n$ bits of precision (i.e. with accuracy
$2^{-n}$) with probability of success $1 - \delta$. In this setup, the expression of $m$ can be
written as (following Eq 5.35 of Ref[1])

$$
    m = n + \left\lceil\log_2\left({2 + \frac{2}{\delta}}\right)\right\rceil
$$

Setting the number of bits $m$ as per the expression above, we get

$$
    Pr\left[|\tilde{\varphi} - \varphi| < \frac{1}{2^n}\right] \geq 1 - \delta
$$

Here $\varphi$ is the true phase and $\tilde{\varphi}$ is the estimated phase.

`TextbookQPE.from_precision_and_delta` method can be used to instantiate the Bloq with
parameters $m$ and $\delta$ as described above.

### Dependence of $m$ using standard deviation $\epsilon$ as the measure of uncertainty
A stronger way to bound the uncertainty in the obtained phase is to bound the variance of the
estimator $\tilde{\varphi}$ by a given parameter $\epsilon$. Following the analysis in Ref[1,2],
we can show that the variance for textbook phase estimation follows the Standard Quantum
Limit(SQL) of

$$
    \sigma[\phi] = 2\pi \sigma[\tilde{\varphi}] = 2\pi\sqrt{\text{Var}[\tilde{\varphi}]}
                                                \leq\frac{\pi}{\sqrt{M}}=\frac{\pi}{\sqrt{2^m}}
$$

Therefore, to bound the standard deviation of the phase estimator $\tilde{\phi}$ by given parameter
$\epsilon$, we set

$$
    m = \left\lceil2\log_2 \left(\frac{\pi}{\epsilon}\right)\right\rceil
$$

`TextbookQPE.from_standard_deviation_eps` method can be used to instantiate the Bloq with
parameter $\epsilon$ as described above.


#### Parameters
 - `unitary`: Bloq representing the unitary to run the phase estimation protocol on.
 - `m_bits`: Bitsize of the phase register to be used during phase estimation.
 - `ctrl_state_prep`: Bloq to prepare the control state on the phase register. Defaults to `OnEach(self.m_bits, Hadamard())`.
 - `qft_inv`: Bloq to apply inverse QFT on the phase register. Defaults to `QFTTextBook(self.m_bits).adjoint()`  

#### Registers
 - `qpe_reg`: Control register of type `QFxp(self.m_bits, self.m_bits)` for phase estimation.
 - `target registers`: All registers used in `self.unitary.signature`  

#### References
 - [Quantum Computation and Quantum Information: 10th Anniversary Edition, Nielsen & Chuang](https://www.cambridge.org/highereducation/books/quantum-computation-and-quantum-information/01E10196D0A682A6AEFFEA52D53BE9AE#overview). Chapter 5.2
 - [Entanglement-free Heisenberg-limited phase estimation](https://arxiv.org/abs/0709.2996). 
